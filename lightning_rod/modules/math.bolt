from bolt_expressions import Scoreboard
from ./config import Config
from ./utils import binary_progression

def random(min_val: int, max_val: int):
    return f"random roll {min_val}..{max_val}"

def power(value: int, exponent: int):
    """Calculate value^exponent using repeated multiplication"""
    math = Scoreboard.objective("math.power")

    math["#base"] = value
    math["#exp"] = exponent
    math["#result"] = 1

    for _ in range(exponent):
        math["#result"] *= math["#base"]

    return math["#result"].component()

def sqrt(value: int):
    """Calculate integer square root using binary search"""
    math = Scoreboard.objective("math.sqrt")

    math["#input"] = value
    math["#result"] = 0

    # Binary search implementation
    for binary_increment in binary_progression(16, reversed=True):
        math["#increment"] = binary_increment
        math["#temp"] = math["#result"] + math["#increment"]
        math["#temp_squared"] = math["#temp"] * math["#temp"]

        # Create condition for comparison
        condition = math["#temp_squared"] <= math["#input"]
        with condition.__branch__():
            math["#result"] += math["#increment"]

    return math["#result"].component()

